#!/usr/bin/env bash
# This script was generated by bashly 0.8.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
trendmicro_usage() {
  if [[ -n $long_usage ]]; then
    printf "trendmicro - TrendMicro Deep Security installer for Linux\n"
    echo

  else
    printf "trendmicro - TrendMicro Deep Security installer for Linux\n"
    echo

  fi

  printf "Usage:\n"
  printf "  trendmicro COMMAND\n"
  printf "  trendmicro [COMMAND] --help | -h\n"
  printf "  trendmicro --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  setup      Setup dependencies for TrendMicro agent"
  echo "  install    Install TrendMicro agent"
  echo "  activate   Activates TrendMicro agent"
  echo "  reset      Reset TrendMicro agent"
  echo "  check      Check if TrendMicro is activated correctly"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
trendmicro_setup_usage() {
  if [[ -n $long_usage ]]; then
    printf "trendmicro setup - Setup dependencies for TrendMicro agent\n"
    echo

  else
    printf "trendmicro setup - Setup dependencies for TrendMicro agent\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "Usage:\n"
  printf "  trendmicro setup [OPTIONS]\n"
  printf "  trendmicro setup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --os-name, -o OS_NAME (required)"
    printf "    Operating system name\n"
    printf "    Allowed: Debian, Ubuntu, SUSE, RedHatEnterprise, Amazon\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  ./trendmicro setup --os-name Debian\n"
    printf "  ./trendmicro setup --os-name SUSE\n"
    echo

  fi
}

# :command.usage
trendmicro_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "trendmicro install - Install TrendMicro agent\n"
    echo

  else
    printf "trendmicro install - Install TrendMicro agent\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "Usage:\n"
  printf "  trendmicro install [OPTIONS]\n"
  printf "  trendmicro install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --os-name, -o OS_NAME (required)"
    printf "    Operating system name\n"
    printf "    Allowed: Debian, Ubuntu, SUSE, RedHatEnterprise, Amazon\n"
    echo

    # :flag.usage
    echo "  --os-version, -v OS_VERSION (required)"
    printf "    Operating system version\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  ./trendmicro install --os-name Debian --os-version 10\n"
    echo

  fi
}

# :command.usage
trendmicro_activate_usage() {
  if [[ -n $long_usage ]]; then
    printf "trendmicro activate - Activates TrendMicro agent\n"
    echo

  else
    printf "trendmicro activate - Activates TrendMicro agent\n"
    echo

  fi

  printf "Alias: a\n"
  echo

  printf "Usage:\n"
  printf "  trendmicro activate [OPTIONS]\n"
  printf "  trendmicro activate --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --cloud-provider, -c CLOUD_PROVIDER (required)"
    printf "    Cloud provider that TrendMicro is being used on\n"
    printf "    Allowed: aws, azure, gcp\n"
    echo

    # :flag.usage
    echo "  --proxy, -p PROXY"
    printf "    Use a proxy with an agent\n"
    printf "    Default: \n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  ACTIVATION_DSM (required)"
    printf "    Url of the trendmicro backend infrastructure\n"
    printf "    Default: dsm://virusprotection.it-solutions.atos.net:4456/\n"
    echo

    # :environment_variable.usage
    echo "  TENANT_ID (required)"
    printf "    Tenant Id of the TrendMicro backend to be used\n"
    printf "    Default: 04ACEB55-E636-5B09-AC96-3115E9D09CB3\n"
    echo

    # :environment_variable.usage
    echo "  TENANT_PW (required)"
    printf "    Tenant Password of the TrendMicro backend to be used\n"
    printf "    Default: 2C2ED37F-95E3-DF48-3661-4D7DEB1288C7\n"
    echo

    # :environment_variable.usage
    echo "  POLICY_ID (required)"
    printf "    Policy Id for TrendMicro\n"
    printf "    Default: 18\n"
    echo

    # :environment_variable.usage
    echo "  GROUP_ID (required)"
    printf "    Group Id for TrendMicro\n"
    printf "    Default: 2\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  ./trendmicro activate --cloud-provider aws\n"
    printf "  ./trendmicro activate --cloud-provider aws --proxy de.coia.siemens.net:9400\n"
    echo

  fi
}

# :command.usage
trendmicro_reset_usage() {
  if [[ -n $long_usage ]]; then
    printf "trendmicro reset - Reset TrendMicro agent\n"
    echo

  else
    printf "trendmicro reset - Reset TrendMicro agent\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "Usage:\n"
  printf "  trendmicro reset\n"
  printf "  trendmicro reset --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  ./trendmicro reset\n"
    echo

  fi
}

# :command.usage
trendmicro_check_usage() {
  if [[ -n $long_usage ]]; then
    printf "trendmicro check - Check if TrendMicro is activated correctly\n"
    echo

  else
    printf "trendmicro check - Check if TrendMicro is activated correctly\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "Usage:\n"
  printf "  trendmicro check\n"
  printf "  trendmicro check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  ./trendmicro check\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
trendmicro_setup_command() {
  # src/setup_command.sh
  inspect_args

  os=${args[--os-name]}

  if [ "$os" == "Debian" ] || [ "$os" == "Ubuntu" ]; then
          OS_PACKAGE_TYPE="deb"
          CERT_DIR="/usr/local/share/ca-certificates/"
          OS_NAME=$os
  elif [ "$os" == "SUSE" ]; then
          OS_PACKAGE_TYPE="rpm"
          CERT_DIR="/usr/share/pki/trust/anchors/"
          OS_NAME="SuSE"
  elif [ "$os" == "RedHatEnterprise" ]; then
          OS_PACKAGE_TYPE="rpm"
          CERT_DIR="/usr/share/pki/ca-trust-source/anchors/"
          OS_NAME="RedHat_EL"
  elif [ "$os" == "Amazon" ]; then
          OS_PACKAGE_TYPE="rpm"
          CERT_DIR="/usr/share/pki/ca-trust-source/anchors/"
          OS_NAME="amzn"
  else
          OS_PACKAGE_TYPE="rpm"
          CERT_DIR="/etc/pki/ca-trust/source/anchors/"
  fi

  echo "Operational System: ${os}"
  echo "Package Type: ${OS_PACKAGE_TYPE}"
  echo "Certificate Directory: ${CERT_DIR}"

  openssl x509 -inform PEM -in certificates/trendmicroAtosSelfSigned.pem -out $CERT_DIR/trendmicroAtosSelfSigned.pem

  if [ "$OS_NAME" = "Debian" ] || [ "$OS_NAME" = "Ubuntu" ]; then
      gpg --import certificates/new_agent.asc
      gpg --import certificates/new_agent.gpg

      echo "Trying to use update-ca-certificates..." && update-ca-certificates
  else
      rpm --import certificates/new_agent.asc
      rpm --import certificates/new_agent.gpg

      echo "Trying to use update-ca-trust..." && update-ca-trust
  fi;
}

# :command.function
trendmicro_install_command() {
  # src/install_command.sh
  inspect_args

  os=${args[--os-name]}
  os_version=${args[--os-version]}

  if [ "$os" == "Debian" ] || [ "$os" == "Ubuntu" ]; then
          OS_PACKAGE_TYPE="deb"
          CERT_DIR="/usr/local/share/ca-certificates/"
          OS=$os\_${os_version}
  elif [ "$os" == "SUSE" ]; then
          OS_PACKAGE_TYPE="rpm"
          CERT_DIR="/usr/share/pki/trust/anchors/"
          OS_NAME="SuSE"
          OS=$OS_NAME\_${os_version}
  elif [ "$os" == "RedHatEnterprise" ]; then
          OS_PACKAGE_TYPE="rpm"
          CERT_DIR="/usr/share/pki/ca-trust-source/anchors/"
          OS_NAME="RedHat_EL"
          OS=$OS_NAME${os_version}
  elif [ "$os" == "Amazon" ]; then
          OS_PACKAGE_TYPE="rpm"
          CERT_DIR="/usr/share/pki/ca-trust-source/anchors/"
          OS_NAME="amzn"
          OS=$OS_NAME${os_version}
  else
          OS_PACKAGE_TYPE="rpm"
          CERT_DIR="/etc/pki/ca-trust/source/anchors/"
  fi

  echo "Operational System: ${os}"
  echo "Package Type: ${OS_PACKAGE_TYPE}"
  echo "Certificate Directory: ${CERT_DIR}"

  echo "Download agent"
  wget_output=$(wget -q -P /tmp/ -c https://virusprotection.it-solutions.atos.net:4455/software/agent/$OS/x86_64/agent.$OS_PACKAGE_TYPE)
  if [ $? -ne 0 ]; then
          echo "Failed to download TrendMicro Agent"
          exit 1
  fi

  echo "Install agent"
  if [ "$OS_PACKAGE_TYPE" == "deb" ]; then
      dpkg -i /tmp/agent.deb
  elif [ "$OS_PACKAGE_TYPE" == "rpm" ]; then
      rpm -ivh /tmp/agent.rpm
  fi
  echo "Start and enable ds_agent service"
  systemctl start ds_agent
  systemctl enable ds_agent
}

# :command.function
trendmicro_activate_command() {
  # src/activate_command.sh
  inspect_args

  cloud_provider=${args[--cloud-provider]}
  proxy=${args[--proxy]}

  if [ $cloud_provider == "aws" ]; then
      TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
      account_id=`curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .accountId`
      hostname=`curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/hostname`
  fi

  if [ $cloud_provider == "azure" ]; then
      account_id=`curl -s -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | jq -r .compute.subscriptionId`
      hostname=`curl -s -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | jq -r .compute.name`
  fi

  if [ $cloud_provider == "gcp" ]; then
      account_id=`curl -s -H Metadata-Flavor:Goole --noproxy "*" "http://metadata.google.internal/computeMetadata/v1/project/project-id"`
      hostname=`curl -s -H Metadata-Flavor:Goole --noproxy "*" "http://metadata.google.internal/computeMetadata/v1/instance/hostname"`
  fi

  if [[ $proxy != "" ]];then
      echo "Configuring proxy: ${proxy}"
      /opt/ds_agent/dsa_control -x dsm_proxy://$proxy/
      /opt/ds_agent/dsa_control -y relay_proxy://$proxy/
  fi

  echo "Activating agent..."
  /opt/ds_agent/dsa_control -a $ACTIVATION_DSM \
      tenantID:$TENANT_ID \
      tenantPassword:$TENANT_PW \
      policyid:$POLICY_ID \
      description:$account_id \
      displayname:$hostname

}

# :command.function
trendmicro_reset_command() {
  # src/reset_command.sh
  inspect_args

  echo "Reseting configuration..."
  /opt/ds_agent/dsa_control -r
  /opt/ds_agent/dsa_control -x ""
  /opt/ds_agent/dsa_control -y ""
}

# :command.function
trendmicro_check_command() {
  # src/check_command.sh
  inspect_args

  ACTIVATION=`/opt/ds_agent/dsa_query --cmd GetAgentStatus dsmCertHash`
  status=$?
  if [ $status -ne 0 ] || [ "$ACTIVATION" == "" ] || [ "$ACTIVATION" == *"couldn"* ]; then
      echo "Activation failed in Activation"
      exit 1
  fi

  COMPONENT_INFO=`/opt/ds_agent/dsa_query -c "GetComponentInfo"`
  status=$?

  if [ $status -ne 0 ] || [[ "$COMPONENT_INFO" != *"Component.AM.driverOffline: false"* ]]; then
      echo "Activation failed in Malware Driver"
      exit 1
  else
      echo "Activation done"
      echo $COMPONENT_INFO
      echo $ACTIVATION
      exit 0
  fi
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    trendmicro_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  setup | s )
    action="setup"
    shift
    trendmicro_setup_parse_requirements "$@"
    shift $#
    ;;

  install | i )
    action="install"
    shift
    trendmicro_install_parse_requirements "$@"
    shift $#
    ;;

  activate | a )
    action="activate"
    shift
    trendmicro_activate_parse_requirements "$@"
    shift $#
    ;;

  reset | r )
    action="reset"
    shift
    trendmicro_reset_parse_requirements "$@"
    shift $#
    ;;

  check | c )
    action="check"
    shift
    trendmicro_check_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    trendmicro_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
trendmicro_setup_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    trendmicro_setup_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="setup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --os-name | -o )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--os-name]="$2"
        shift
        shift
      else
        printf "%s\n" "--os-name requires an argument: --os-name, -o OS_NAME" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args[--os-name]+x} ]]; then
    printf "missing required flag: --os-name, -o OS_NAME\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ! ${args[--os-name]} =~ ^(Debian|Ubuntu|SUSE|RedHatEnterprise|Amazon)$ ]]; then
    printf "%s\n" "--os-name must be one of: Debian, Ubuntu, SUSE, RedHatEnterprise, Amazon" >&2
    exit 1
  fi

}

# :command.parse_requirements
trendmicro_install_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    trendmicro_install_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --os-name | -o )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--os-name]="$2"
        shift
        shift
      else
        printf "%s\n" "--os-name requires an argument: --os-name, -o OS_NAME" >&2
        exit 1
      fi
      ;;

    # :flag.case
    --os-version | -v )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--os-version]="$2"
        shift
        shift
      else
        printf "%s\n" "--os-version requires an argument: --os-version, -v OS_VERSION" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args[--os-name]+x} ]]; then
    printf "missing required flag: --os-name, -o OS_NAME\n" >&2
    exit 1
  fi
  if [[ -z ${args[--os-version]+x} ]]; then
    printf "missing required flag: --os-version, -v OS_VERSION\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ! ${args[--os-name]} =~ ^(Debian|Ubuntu|SUSE|RedHatEnterprise|Amazon)$ ]]; then
    printf "%s\n" "--os-name must be one of: Debian, Ubuntu, SUSE, RedHatEnterprise, Amazon" >&2
    exit 1
  fi

}

# :command.parse_requirements
trendmicro_activate_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    trendmicro_activate_usage
    exit
    ;;

  esac

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export ACTIVATION_DSM="${ACTIVATION_DSM:-dsm://virusprotection.it-solutions.atos.net:4456/}"
  export TENANT_ID="${TENANT_ID:-04ACEB55-E636-5B09-AC96-3115E9D09CB3}"
  export TENANT_PW="${TENANT_PW:-2C2ED37F-95E3-DF48-3661-4D7DEB1288C7}"
  export POLICY_ID="${POLICY_ID:-18}"
  export GROUP_ID="${GROUP_ID:-2}"

  if [[ -z "${ACTIVATION_DSM:-}" ]]; then
    printf "missing required environment variable: ACTIVATION_DSM\n" >&2
    exit 1
  fi
  if [[ -z "${TENANT_ID:-}" ]]; then
    printf "missing required environment variable: TENANT_ID\n" >&2
    exit 1
  fi
  if [[ -z "${TENANT_PW:-}" ]]; then
    printf "missing required environment variable: TENANT_PW\n" >&2
    exit 1
  fi
  if [[ -z "${POLICY_ID:-}" ]]; then
    printf "missing required environment variable: POLICY_ID\n" >&2
    exit 1
  fi
  if [[ -z "${GROUP_ID:-}" ]]; then
    printf "missing required environment variable: GROUP_ID\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="activate"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --cloud-provider | -c )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--cloud-provider]="$2"
        shift
        shift
      else
        printf "%s\n" "--cloud-provider requires an argument: --cloud-provider, -c CLOUD_PROVIDER" >&2
        exit 1
      fi
      ;;

    # :flag.case
    --proxy | -p )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--proxy]="$2"
        shift
        shift
      else
        printf "%s\n" "--proxy requires an argument: --proxy, -p PROXY" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args[--cloud-provider]+x} ]]; then
    printf "missing required flag: --cloud-provider, -c CLOUD_PROVIDER\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args[--proxy]:-} ]] || args[--proxy]=""

  # :command.whitelist_filter
  if [[ ! ${args[--cloud-provider]} =~ ^(aws|azure|gcp)$ ]]; then
    printf "%s\n" "--cloud-provider must be one of: aws, azure, gcp" >&2
    exit 1
  fi

}

# :command.parse_requirements
trendmicro_reset_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    trendmicro_reset_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="reset"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
trendmicro_check_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    trendmicro_check_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "setup" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      trendmicro_setup_usage
    else
      trendmicro_setup_command
    fi

  elif [[ $action == "install" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      trendmicro_install_usage
    else
      trendmicro_install_command
    fi

  elif [[ $action == "activate" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      trendmicro_activate_usage
    else
      trendmicro_activate_command
    fi

  elif [[ $action == "reset" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      trendmicro_reset_usage
    else
      trendmicro_reset_command
    fi

  elif [[ $action == "check" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      trendmicro_check_usage
    else
      trendmicro_check_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
